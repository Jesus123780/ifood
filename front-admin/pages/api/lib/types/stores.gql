
  # Stores
  type ContractType {
    ctrId: ID
    id: ID
    idStore: ID
    ctCode: String
    catDescription: String
    createAt: DateTime
    updateAt: DateTime
  }
  input InputContractType {
    ctrId: ID
    id: ID
    idStore: ID
    ctCode: String
    catDescription: String
    createAt: DateTime
    updateAt: DateTime
  }

  type FavoriteStore {
    fIStoreId: ID
    fState: Int
    idStore: ID
  }
  type Store {
    idStore: ID
    cId: ID
    id: ID
    dId: ID
    ctId: ID
    catStore: ID
    neighborhoodStore: String
    Viaprincipal: String
    storeOwner: String
    storeName: String
    emailStore: String
    storePhone: String
    socialRaz: String
    Image: String
    banner: String
    documentIdentifier: String
    uPhoNum: String
    ULocation: String
    upLat: String
    upLon: String
    uState: String
    siteWeb: String
    description: String
    NitStore: String
    typeRegiments: String
    typeContribute: String
    secVia: String
    addressStore: String
    createAt: DateTime
    cateStore: CatStore
    pais: Country
    city: City
    department: Department
    getStoreSchedules: [StoreSchedule]
  }
  input IStore {
    idStore: ID
    cId: ID
    id: ID
    dId: ID
    ctId: ID
    catStore: ID
    neighborhoodStore: String
    Viaprincipal: String
    storeOwner: String
    storeName: String
    emailStore: String
    storePhone: String
    socialRaz: String
    Image: String
    banner: String
    documentIdentifier: String
    uPhoNum: String
    ULocation: String
    upLat: String
    upLon: String
    uState: String
    siteWeb: String
    description: String
    NitStore: String
    typeRegiments: String
    typeContribute: String
    secVia: String
    addressStore: String
    createAt: DateTime
  }

  type Query {
"""Response for find one Store"""
    getStore(id: ID, StoreName: String, idStore: ID): Store
    getAllStore(id: ID, StoreName: String, idStore: ID): [Store]
    getAllStoreInStore(pId: ID, cId: ID, dId: ID, ctId: ID, search: String, min: Int, max: Int): [Store]
    getOneStore(id: ID, StoreName: String, idStore: ID): Store
    getOneCOntractStore(StoreName: String, idStore: ID): ContractType
    getFavorite: [FavoriteStore]
    getOneFavorite(idStore: ID): FavoriteStore
  }

input IFavorites{
  fIStoreId: ID
  fState: Int
  idStore: ID!
}
type Mutation {
  """"registra Store data"""
  newRegisterStore(input: IStore): AuthPayload
  createOneContract(input: InputContractType): AuthPayload
  setFavorites(input: IFavorites!): Response!
}

type Subscription {
  newStore: Store
}