# Stores

type Store {
    idStore: ID
    cId: ID
    id: ID
    dId: ID
    ctId: ID
    catStore: ID
    neighborhoodStore: String
    Viaprincipal: String
    storeOwner: String
    storeName: String
    emailStore: String
    storePhone: String
    socialRaz: String
    Image: String
    ImageName: String
    banner: String
    documentIdentifier: String
    uPhoNum: String
    ULocation: String
    upLat: String
    upLon: String
    uState: String
    siteWeb: String
    description: String
    NitStore: String
    typeRegiments: String
    typeContribute: String
    secVia: String
    addressStore: String
    createAt: DateTime
}
input IStore {
    idStore: ID
    cId: ID
    id: ID
    dId: ID
    ctId: ID
    catStore: ID
    neighborhoodStore: String
    Viaprincipal: String
    storeOwner: String
    storeName: String
    emailStore: String
    storePhone: String
    socialRaz: String
    Image: String
    ImageName: String
    banner: String
    documentIdentifier: String
    uPhoNum: String
    ULocation: String
    upLat: String
    upLon: String
    uState: String
    siteWeb: String
    description: String
    NitStore: String
    typeRegiments: String
    typeContribute: String
    secVia: String
    addressStore: String
    createAt: DateTime
}

type Query {
    """
    Response for find one Store
    """
    getStore(id: ID, StoreName: String, idStore: ID): Store
}
type Mutation {
    """
    "registra Store data
    """
    setALogoStore(logo: Upload, idStore: ID): Response
    deleteALogoStore(idStore: ID, Image: String): Response
}

type Subscription {
    newStore: [Store]
}
