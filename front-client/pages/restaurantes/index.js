import Head from 'next/head'
import { gql, useLazyQuery, useQuery, useSubscription } from '@apollo/client'
import styles from '../../styles/Home.module.css'
import { GET_ONE_STORE } from '../../container/queries'
import { Restaurant } from '../../container/restaurantes'
import { useContext, useEffect, useState } from 'react'
import { Context } from '../../context'
import { PromosBanner } from '../../container/restaurantes/PromosBanner'
import { Section } from '../../container/restaurantes/styled'
import { ListRestaurant } from '../../container/restaurantes/restaurant'
import { GET_ALL_COUNTRIES } from '../../gql/Location'
import withSession from '../../apollo/session'
import { decodeToken } from '../../utils'
import { GET_ALL_RESTAURANT } from '../../container/restaurantes/queries'
import { GET_MESSAGES } from '../../gql/test'
import { RippleButton } from 'components/Ripple'
import { FavoriteStore } from 'container/favoriteStore'
import { ItMayInterestYou, LastRecommended } from 'container/LastRecomendation'
import { BColor, BGColor, PColor } from 'public/colors'

export default function RestaurantHome({ ID_CATEGORIE, PRODUCT_NAME_COOKIE }) {
  const { data } = useQuery(GET_ONE_STORE)
  const { data: dataEy } = useQuery(GET_ALL_COUNTRIES)
  const { data: dataM } = useQuery(GET_MESSAGES, {
    context: { clientName: "subscriptions" }
  });
  const NEW_MESSAGE = gql`
  subscription {
  numberIncremented
  }
  `
  const [dataStore, setData] = useState([])
  const [showMore, setShowMore] = useState(100)
  const [getAllStoreInStore, { data: dataListStore, fetchMore }] = useLazyQuery(GET_ALL_RESTAURANT, {
    fetchPolicy: 'cache-and-network',
    notifyOnNetworkStatusChange: true,
    nextFetchPolicy: 'cache-first',
    refetchWritePolicy: 'merge',
  })
  useEffect(() => {
    dataListStore?.getAllStoreInStore && setData([...dataListStore?.getAllStoreInStore])
    getAllStoreInStore()
  }, [dataStore])
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Section>
        <PromosBanner />
      </Section>
      <Section>
        <Restaurant />
      </Section>
      <Section>
        <ListRestaurant
          data={dataListStore?.getAllStoreInStore || []}
        />
      </Section>
      {<RippleButton
        bgColor={BGColor}
        color={BColor}
        border={`1px solid ${PColor}`}
        onClick={() => {
          setShowMore(showMore + 100)
          // getAllStoreInStore()
          fetchMore({
            variables: { max: showMore, min: 0 },
            updateQuery: (prevResult, { fetchMoreResult }) => {
              if (!fetchMoreResult) return prevResult
              return {
                // getAllStoreInStore: [...prevResult.getAllStoreInStore],
                getAllStoreInStore: [...fetchMoreResult.getAllStoreInStore]

              }
            }
          })
        }}
        widthButton='100%'>Ver m√°s</RippleButton>}
      <FavoriteStore />
      <LastRecommended ID_CATEGORIE={ID_CATEGORIE} />
      <ItMayInterestYou PRODUCT_NAME_COOKIE={PRODUCT_NAME_COOKIE} />
    </div>
  )
}

export const getServerSideProps = withSession(async function ({ req, res }) {
  const user = req?.session?.get('user')
  const { RECOMMENDATION_COOKIE, PRODUCT_NAME_COOKIE } = req.cookies || {}
  if (!user) {
    res.setHeader('location', '/entrar')
    res.statusCode = 302
    res.end()
    return { props: {} }
  }
  if (!req.cookies[process.env.SESSION_NAME]) return { redirect: { destination: '/entrar' } }

  return {
    props: {
      ID_CATEGORIE: RECOMMENDATION_COOKIE || null,
      PRODUCT_NAME_COOKIE: PRODUCT_NAME_COOKIE || null,
    }
  }
}
)
